import pygame, sys
from random import randint, uniform

#Game Setup

pygame.init()
pygame.display.set_caption('Asteroid Clone - OOP')
SCREEN_W, SCREEN_H = 1280, 720 
display_surface = pygame.display.set_mode((SCREEN_W, SCREEN_H))
clock = pygame.time.Clock()

#Start Screen
game_state = "start_menu"
def draw_start_menu():
    display_surface.fill((0, 0, 0))
    font = pygame.font.SysFont('arial', 40)
    title = font.render('Asteroid Shooter', True, (255, 255, 255))
    start_button = font.render('Start', True, (255, 255, 255))
    display_surface.blit(title, (SCREEN_W/2 - title.get_width()/2, SCREEN_H/2 - title.get_height()/2))
    display_surface.blit(start_button, (SCREEN_W/2 - start_button.get_width()/2, SCREEN_H/2 + start_button.get_height()/2))
    pygame.display.update()
#Background
background_surface = pygame.image.load("./Sprites/background.png").convert()
#Shaceship
ship = pygame.image.load("./Sprites/player.png").convert_alpha()
ship_rect = ship.get_rect(center = (SCREEN_W/2,SCREEN_H/2))
#Laser
laser = pygame.image.load("./Sprites/laser.png").convert_alpha()
laser_rect = laser.get_rect(midbottom = ship_rect.midtop)
laser_list = []
#Asteroid
asteroid = pygame.image.load("./Sprites/asteroid.png").convert_alpha()
asteroid_rect = asteroid.get_rect(center = (randint(0, 1280),0))
asteroid_list = []
#Sound Files
laser_sound = pygame.mixer.Sound("./Audio/laser_sound.mp3")
explode_sound = pygame.mixer.Sound("./Audio/bomb.mp3")
bg_music = pygame.mixer.Sound("./Audio/serenity.mp3")
bg_music.play(loops = -1)
#Score
score = 0
score_increment = 1
font = pygame.font.Font(None, 36)

#Laser Functions
def laser_update(laser_list):
    for rect in laser_list:
        rect.y -= 10
        if rect.bottom < 0:
            laser_list.remove(rect)

#Asteroid Functions
def asteroid_update(asteroid_list, speed=1):
    for asteroid_tuple in asteroid_list:
        asteroid_rect = asteroid_tuple[0]
        direction = asteroid_tuple[1]
        asteroid_rect.center += direction*speed
        if asteroid_rect.top > SCREEN_H:
            asteroid_list.remove(asteroid_tuple)
        
asteroid_spawn_rate = 500
asteroid_timer = pygame.event.custom_type()
pygame.time.set_timer(asteroid_timer, asteroid_spawn_rate)

#def MousePosition():x
#  print(pygame.mouse.get_pos())

#Main Game Loop
while True:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      pygame.quit()
      sys.exit()
    if game_state == "start_menu":
        draw_start_menu()
    if event.type == pygame.MOUSEBUTTONDOWN:
        if event.button == 1:
            laser_rect = laser.get_rect(midbottom = ship_rect.midtop)
            laser_list.append(laser_rect)
            laser_sound.play()
            
    if event.type == asteroid_timer:
        pos_x = randint(-100,SCREEN_W+100)
        pos_y = randint(-100,-50)
        spawn_point = (pos_x,pos_y)
        asteroid_rect = asteroid.get_rect(center = spawn_point)
        spawn_direction = pygame.math.Vector2(uniform(-1,1),uniform(0.2,1.0))
        asteroid_list.append((asteroid_rect,spawn_direction))

  if game_state == "game":
      clock.tick(60)
      
      #Player Movement
      ship_rect.midtop = pygame.mouse.get_pos()
      
      #Object Movement
      laser_update(laser_list)
      asteroid_update(asteroid_list, randint(1,10))
      
      #Score Update
      score_text = font.render(f'Score: {score}', True, (255, 255, 255))
      

      #Collisions
      #Ship
      for asteroid_tuple in asteroid_list:
          asteroid_rect = asteroid_tuple[0]
          if ship_rect.colliderect(asteroid_rect):
              pygame.quit()
              sys.exit()
      #Lasers
      for asteroid_tuple in asteroid_list:
          for laser_rect in laser_list:
              if asteroid_tuple[0].colliderect(laser_rect):
                  asteroid_list.remove(asteroid_tuple)
                  laser_list.remove(laser_rect)
                  explode_sound.play()
                  score += score_increment
        
      #Background
      display_surface.fill((0,0,0))
      display_surface.blit(background_surface,(0,0))
      display_surface.blit(score_text, (10, 10))
      
      #pygame.draw.rect(display_surface, "red", ship_rect, width=1)
      display_surface.blit(ship,ship_rect,)
      
      
      #display_surface.blit(laser,laser_rect)
      for rect in laser_list:
          #pygame.draw.rect(display_surface, "red", laser_rect, width=1)
          display_surface.blit(laser,rect)
      for asteroid_tuple in asteroid_list:
          #pygame.draw.rect(display_surface, "red", asteroid_tuple[0], width=1)
          display_surface.blit(asteroid,asteroid_tuple[0])
      pygame.display.update()

